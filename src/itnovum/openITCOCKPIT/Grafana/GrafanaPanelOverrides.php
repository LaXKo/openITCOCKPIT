<?php

namespace App\itnovum\openITCOCKPIT\Grafana;

use itnovum\openITCOCKPIT\Grafana\GrafanaTargetCollection;

/**
 * Grafana Panel overrides contains the overrides for the new panel structure as of Grafana 9
 *
 * @TODO
 * axis placement (definition of the placement where a axis for a metric should be displayed)
 *
 *
 * example structure:
 * "overrides" => [
 *      [    //override definition for a single metric, in this case "default host.LinuxLoad.load1"
 *           "matcher"    => [
 *               "id"      => "byName",
 *               "options" => "default host.LinuxLoad.load1"
 *           ],
 *           "properties" => [
 *               [   // color of the metric
 *                   "id"    => "color",
 *                   "value" => [
 *                       "fixedColor" => "rgb(17, 36, 214)",
 *                       "mode"       => "fixed"
 *                   ]
 *               ],
 *               [    // unit per metric. if not set, the value of GrafanaFieldConfigDefaults will be used
 *                   "id"=> "unit",
 *                   "value"=> "masskg"
 *               ],
 *               [   // Y-Axis placement
 *                   "id" => "custom.axisPlacement",
 *                   "value" => "right"
 *               ]
 *           ]
 *      ],
 *      //next custom override for another metric...
 * ]
 */
class GrafanaPanelOverrides {

    /** @var array */
    private $overrides = [];

    /** @var array */
    private $targets = [];

    public function __construct(GrafanaTargetCollection $GrafanaTargetCollection) {
        $this->targets = $GrafanaTargetCollection->getTargets();
        $this->buildOverrides();
    }

    /**
     * @return array
     */
    public function getOverrides(): array {
        return $this->overrides;
    }

    /**
     * @return void
     */
    private function buildOverrides() {
        foreach ($this->targets as $key => $grafanaTarget) {
            $override = [
                "matcher" => [
                    "id"      => "byName",
                    "options" => $grafanaTarget->getAlias()
                ]
            ];
            $override["properties"] = $this->getOverrideProperties($grafanaTarget);

            $this->overrides[] = $override;
        }
    }

    /**
     * @param $grafanaTarget
     * @return array
     */
    private function getOverrideProperties($grafanaTarget): array {
        if (!empty($grafanaTarget)) {
            $properties = [];
            $properties[] = $this->getColor($grafanaTarget);
            $properties[] = $this->getUnitPerMetric($grafanaTarget);
            return $properties;
        }
        return [];
    }

    /**
     * @param $grafanaTarget
     * @return array
     */
    private function getColor($grafanaTarget): array {
        if (!empty($grafanaTarget)) {
            if (!empty($grafanaTarget->getColor())) {
                return [
                    "id"    => "color",
                    "value" => [
                        "fixedColor" => $grafanaTarget->getColor(),
                        "mode"       => "fixed"
                    ]
                ];
            }
        }
        return [];
    }

    /**
     * set a unit per metric, not per panel
     * @param $grafanaTarget
     * @return array
     */
    private function getUnitPerMetric($grafanaTarget): array {
        if (!empty($grafanaTarget->getUnit())) {
            return [
                "id"    => "unit",
                "value" => $grafanaTarget->getUnit()
            ];
        }
        return [];
    }

    /**
     * @TODO this seems to be obsolete - yaxis placement is still working with autogenerated graphs. May useful when placing is needed for user defined graphs
     * @return string[]
     */
    private function getAxisPlacement(): array {
        $axisPlacement = [
            "id"    => "custom.axisPlacement",
            "value" => "right"
        ];
        return $axisPlacement;
    }
}
